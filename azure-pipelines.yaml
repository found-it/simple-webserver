#
#
# Azure Pipeline for Anchore testing
#
# TODO: Use a script to push prebuilt image to production
#
#
#

---
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  image: 'flasky'
  dockerRegistry: 'jpetersenames/$(image)'
  stagingDockerRegistry: '$(dockerRegistry)-staging'
  tag: $(Build.SourceVersion)
  dockerRegistryServiceConnection: 'jpetersenames-dockerhub'


# steps:
stages:
- stage: Testing
  displayName: CI for Python
  jobs:
  - job: Testing
    displayName: Test Application
    steps:
    - script: |
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install --upgrade flask pylint
        echo "##vso[task.prependpath]${PATH}:/home/vsts/.local/bin"
      displayName: Install dependencies

    - script: |
        python3 app_test.py
      displayName: Test the application

    - script: |
        pylint app.py
      continueOnError: true
      displayName: Lint the python app

- stage: Anchore
  displayName: Scan Docker Image
  jobs:
  - job: Anchore
    displayName: Scan Docker Image
    steps:
    - script: |
        docker pull hadolint/hadolint
        docker run --rm -i hadolint/hadolint < Dockerfile
      continueOnError: true
      displayName: Lint the Dockerfile

    - script: |
        docker build -t local/flasky:staging .

    - script: |
        docker image ls
        curl -s https://ci-tools.anchore.io/inline_scan-v0.6.0 | bash -s -- local/flasky:staging .
      displayName: Scan image inline

- stage: Production
  displayName: Push to production
  jobs:
  - job: Production
    displayName: Push to production
    steps:
    - task: Docker@2
      displayName: Push the image to production
      inputs:
        command: buildAndPush
        dockerfile: Dockerfile
        repository: $(dockerRegistry)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
