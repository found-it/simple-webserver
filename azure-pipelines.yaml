#
#
# Azure Pipeline for Anchore testing
#
# TODO: Auto update tag from git tag
#

---
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: srcDirectory
    value: '$(System.DefaultWorkingDirectory)/src'
  - name: tag
    value: '0.1.0'
  - name: image
    value: 'ipserver'
  - name: dockerRegistry
    value: 'jpetersenames/$(image)'
  - name: stagingDockerRegistry
    value: '$(dockerRegistry)-staging'
  - name: dockerRegistryServiceConnection
    value: 'jpetersenames-dockerhub'

    # Anchore stuff
  - name: anchore_user
    value: 'admin'
  - name: anchore_url
    value: 'http://mswscan-testjp.eastus.cloudapp.azure.com:8228/v1'
  - group: AnchoreCreds

    # k8s stuff
  - name: k8sImagePullSecret
    value: 'demo-pull-secret'
  - name: clusterName
    value: 'demo'
  - name: namespace
    value: 'default'



# Stages for Testing and Deployment
stages:
- stage: Testing
  displayName: CI for Go
  jobs:
  - job: Golang
    displayName: Build and Test Go
    steps:
    - task: GoTool@0
      inputs:
        version: '1.14'
      displayName: Download Go

    - task: Go@0
      inputs:
        command: 'build'
        workingDirectory: '$(srcDirectory)'
      displayName: Build the project

    - task: Go@0
      inputs:
        command: 'test'
        arguments: '-v'
        workingDirectory: '$(srcDirectory)'
      displayName: Test the project

- stage: Evaluate
  displayName: Scan Docker Image
  jobs:
  - job: Evaluate
    displayName: Scan Docker Image
    steps:
    - script: |
        docker pull hadolint/hadolint
        docker run --rm -i hadolint/hadolint < Dockerfile
      continueOnError: true
      displayName: Lint the Dockerfile

    - script: |
        docker build -t $(image):$(tag) .
      displayName: Build the local image

    # - task: AzureKeyVault@1
    #   inputs:
    #     azureSubscription: 'Pay-As-You-Go(6544ac93-6d33-4c26-9dff-ee38b14570e0)'
    #     KeyVaultName: 'anchore-keyvault'
    #     SecretsFilter: '*'

    - script: |
        docker image ls
        curl -s https://ci-tools.anchore.io/inline_scan-v0.7.0 | bash -s -- \
          analyze \
          -u $(anchore_user) \
          -p $(anchorepass) \
          -r $(anchore_url) \
          -f ./Dockerfile \
          -g $(image):$(tag)
      displayName: Scan image and send to engine

    - script: |
        python -m pip install --upgrade pip setuptools wheel
        pip install --upgrade anchorecli
        echo "##vso[task.prependpath]${PATH}:/home/vsts/.local/bin"
      displayName: Configure anchore-cli

    - script: |
        anchore-cli \
          --u $(anchore_user) \
          --p $(anchorepass) \
          --url $(anchore_url) \
          evaluate check localbuild/$(image):$(tag)
      displayName: Evaluate the image

- stage: Push
  displayName: Push to production
  dependsOn:
  - Evaluate
  - Testing
  jobs:
  - job: Push
    displayName: Push to production
    steps:
    - task: Docker@2
      displayName: Push the image to production
      inputs:
        command: buildAndPush
        dockerfile: Dockerfile
        repository: $(dockerRegistry)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests'

- stage: Deploy
  displayName: Deploy to K8S
  dependsOn: Push
  jobs:
  - deployment: Deploy
    displayName: Deploy to k8s
    environment: $(clusterName).default
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create secret to pull image
            inputs:
              action: createSecret
              secretName: $(k8sImagePullSecret)
              namespace: $(namespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              kubernetesServiceConnection: $(clusterName)

          - task: KubernetesManifest@0
            displayName: Deploy to k8s
            inputs:
              action: deploy
              namespace: $(namespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deploy.yaml
                $(System.ArtifactsDirectory)/manifests/svc.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(dockerRegistry):$(tag)
              kubernetesServiceConnection: $(clusterName)
