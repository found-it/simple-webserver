
trigger:
- master

resources:
- repo: self

variables:
  # Production Registry Variables
- name: productionServiceConnection
  value: 'jpetersenames-dockerhub'
- name: productionRegistry
  value: 'jpetersenames'
- name: productionImage
  value: '$(productionRegistry)/$(imageRepository):$(tag)'

- name: imageRepository
  value: 'simpleserver'
- name: dockerfilePath
  value: '$(Build.SourcesDirectory)/Dockerfile'
- name: tag
  value: '$(Build.BuildId)'
- name: vmImageName
  value: 'ubuntu-latest'

  # START NEW VARIABLES
- name: stagingServiceConnection
  value: 'staging'
- name: stagingRegistry
  value: 'anchorestaging.azurecr.io'
- name: stagedImage
  value: '$(stagingRegistry)/$(imageRepository):$(tag)'

- name: anchore_user
  value: 'admin'
- name: anchore_url
  value: 'http://40.78.124.168/v1/'
- group: anchoreCredentials
  # END NEW VARIABLES


stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to staging registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(stagingServiceConnection)
        tags: |
          $(tag)

- stage: Security
  displayName: Security scan stage
  jobs:
  - job: Security
    displayName: Security
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: python -m pip install --upgrade pip setuptools wheel anchorecli
      displayName: Install Anchore CLI

    - script: |
        export PATH=$PATH:/home/vsts/.local/bin
        export ANCHORE_CLI_USER=$(anchore_user)
        export ANCHORE_CLI_PASS=$(anchore_pass)
        export ANCHORE_CLI_URL=$(anchore_url)
        anchore-cli image add $(stagedImage) --dockerfile=$(dockerfilePath)
        anchore-cli image wait $(stagedImage)
        anchore-cli image vuln $(stagedImage) all
        anchore-cli evaluate check $(stagedImage)
      displayName: Anchore Security Scan

- stage: Production
  displayName: Push to production
  jobs:
  - job: Production
    displayName: Production
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        docker pull $(stagedImage)
        docker tag $(stagedImage) $(productionImage)
      displayName: Tag the image as production

    - task: Docker@2
      displayName: Push the image to the production registry
      inputs:
        command: push
        repository: $(productionRegistry)/$(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(productionServiceConnection)
        tags: |
          $(tag)


