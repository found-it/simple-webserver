# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  image: 'flasky'
  dockerRegistry: 'jpetersenames/$(image)'
  stagingDockerRegistry: '$(dockerRegistry)-staging'
  # srcDirectory: '$(System.DefaultWorkingDirectory)/src'
  tag: $(Build.SourceVersion)
  dockerRegistryServiceConnection: 'jpetersenames-dockerhub'


# steps:
stages:
# - stage: Golang
#   displayName: CI for Go
#   jobs:
#   - job: Golang
#     displayName: Build and Test Go
#     steps:
#     - task: GoTool@0
#       inputs:
#         version: '1.14.1'
#
#     - task: Go@0
#       inputs:
#         command: 'build'
#         workingDirectory: '$(srcDirectory)'
#
#     - task: Go@0
#       inputs:
#         command: 'test'
#         arguments: '-v'
#         workingDirectory: '$(srcDirectory)'


- stage: Docker
  displayName: Build and Push Docker
  jobs:
  - job: Docker
    displayName: Build and Push Docker
    steps:
    - script: |
        docker pull hadolint/hadolint
        docker run --rm -i hadolint/hadolint < Dockerfile
      continueOnError: true
      displayName: Lint the Dockerfile

    - task: Docker@2
      displayName: Build the simple-webserver image and push to staging
      inputs:
        command: buildAndPush
        dockerfile: Dockerfile
        repository: $(stagingDockerRegistry)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Anchore
  displayName: Anchore Security Scan
  jobs:
  - job: Anchore
    displayName: Anchore Security Scan
    steps:
    - script: python -m pip install --upgrade pip setuptools wheel
      displayName: Install tools for Anchore CLI

    - script: |
        pip install --upgrade anchorecli
        echo "##vso[task.prependpath]${PATH}:/home/vsts/.local/bin"
        echo "##vso[task.setvariable variable=ANCHORE_CLI_USER]admin"
        echo "##vso[task.setvariable variable=ANCHORE_CLI_PASS]foobar"
        echo "##vso[task.setvariable variable=ANCHORE_CLI_URL]http://anchore-testjp.eastus.cloudapp.azure.com:8228/v1"
      displayName: Configure Anchore Security Scan

    - script: |
        anchore-cli image add "$(stagingDockerRegistry):$(tag)" --dockerfile=Dockerfile
      displayName: Add image

    - script: |
        anchore-cli image wait "$(stagingDockerRegistry):$(tag)"
      displayName: Wait for image

    - script: |
        anchore-cli image content "$(stagingDockerRegistry):$(tag)" os
      displayName: List content of image

    - script: |
        anchore-cli image vuln "$(stagingDockerRegistry):$(tag)" all
      displayName: List vulnerabilities in image

    - script: |
        anchore-cli evaluate check "$(stagingDockerRegistry):$(tag)"
      displayName: Evaluate image

- stage: Production
  displayName: Push to production
  jobs:
  - job: Production
    displayName: Push to production
    steps:
    - task: Docker@2
      displayName: Push the image to production
      inputs:
        command: buildAndPush
        dockerfile: Dockerfile
        repository: $(dockerRegistry)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
